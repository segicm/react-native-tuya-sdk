{"version":3,"file":"react-native-tuya.cjs.production.min.js","sources":["../src/bridgeUtils.ts","../src/activator.ts","../src/device.ts","../src/deviceSubscriptions.ts","../src/home.ts","../src/homeDataManager.ts","../src/homeManager.ts","../src/homeMember.ts","../src/ota.ts","../src/timer.ts","../src/user.ts"],"sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { DeviceBean } from 'device'\nimport { DeviceSchemaItem } from 'home'\n\nexport const GROUPLISTENER = 'groupListener';\nexport const HARDWAREUPGRADELISTENER = 'hardwareUpgradeListener';\nexport const DEVLISTENER = 'devListener';\nexport const SUBDEVLISTENER = 'subDevListener';\nexport const HOMESTATUS = 'homeStatus';\nexport const HOMECHANGE = 'homeChange';\nexport const SINGLETRANSFER = 'SingleTransfer';\n\nlet eventEmitter = new NativeEventEmitter(NativeModules.TuyaRNEventEmitter);\n\nexport function addEvent(eventName: string, callback: (data: any) => any) {\n  return eventEmitter.addListener(eventName, callback);\n}\nexport const bridge = (key: string, id: string | number) => `${key}//${id}`;\n\n/*\n * On iOS home devices list has differences in structure, soo need to make it same as on android\n * */\nexport const prepareDeviceBean = (device: DeviceBean & { schema: string; }) => {\n  const schema = JSON.parse(device.schema) as Array<DeviceSchemaItem>;\n  const schemaMap: Record<string, DeviceSchemaItem> = {};\n  const dpCodeSchemaMap: Record<string, DeviceSchemaItem> = {};\n  schema.forEach((item) => {\n    schemaMap[item.id] = item;\n    dpCodeSchemaMap[item.code] = item;\n  });\n  return {\n    ...device,\n    schemaMap,\n    productBean: {\n      schemaInfo: {\n        dpCodeSchemaMap,\n      },\n    }\n  };\n};\n","import { DeviceBean } from 'device';\nimport { NativeModules, Platform } from 'react-native';\nimport { DeviceDetailResponse } from './home';\nimport { prepareDeviceBean } from './bridgeUtils'\n\nconst tuya = NativeModules.TuyaActivatorModule;\nconst tuyaBLEActivator = NativeModules.TuyaBLEActivatorModule;\nconst tuyaBLEScanner = NativeModules.TuyaBLEScannerModule;\n\nexport function openNetworkSettings() {\n  return tuya.openNetworkSettings({});\n}\n\nexport enum TuyaActivationType {\n  EZ = 'TY_EZ',\n  AP = 'TY_AP',\n  QR = 'TY_QR',\n}\n\nexport type InitActivatorParams = {\n  homeId: number;\n  ssid: string;\n  password: string;\n  time: number;\n  type: TuyaActivationType;\n};\n\nexport interface InitBluetoothActivatorParams {\n  deviceId?: string;\n  homeId: number;\n  ssid: string;\n  password: string;\n}\n\nexport interface StartLeScanParams {\n  timeout: number;\n  homeId: number;\n  scanType:\n    | 'SINGLE'\n    | 'SINGLE_QR'\n    | 'MESH'\n    | 'SIG_MESH'\n    | 'NORMAL'\n    | 'TY_BEACON';\n}\n\ntype IOSBLEActivatorParams = {\n  homeId: number;\n  ssid: string;\n  password: string;\n  timeout: number;\n  deviceId: string;\n  productId: string;\n};\ntype AndroidBLEActivatorParams = {\n  homeId: number;\n  ssid: string;\n  password: string;\n  timeout: number;\n  uuid: string;\n  deviceType: number;\n  mac: string;\n  address: string;\n  token: string;\n};\nexport type InitBluetoothActivatorFromScanBeanParams =\n  | IOSBLEActivatorParams\n  | AndroidBLEActivatorParams;\n\nexport async function initActivator(\n  params: InitActivatorParams\n): Promise<DeviceDetailResponse> {\n  if (Platform.OS === 'ios') {\n    const device = await tuya.initActivator(params);\n    return prepareDeviceBean(device);\n  }\n  return tuya.initActivator(params);\n}\n\nexport type GetActivatorTokenParams = {\n  homeId: number;\n};\n\nexport function getActivatorToken(params: GetActivatorTokenParams) {\n  return tuya.getActivatorToken(params);\n}\n\nexport type StartQRActivatorParams = {\n  token: string;\n  time: number;\n};\n\nexport type ActiveBleParams = {deviceInfo: any, homeId: string};\n\nexport async function startQRActivator(params: StartQRActivatorParams): Promise<DeviceDetailResponse> {\n  if (Platform.OS === 'ios') {\n    const device = await tuya.initActivator({ ...params, type: 'TY_QR' });\n    return prepareDeviceBean(device);\n  }\n  return tuya.startQRActivator(params);\n}\n\nexport function stopQRActivator() {\n  if (Platform.OS === 'ios') {\n    return stopConfig();\n  }\n  return tuya.stopQRActivator();\n}\n\nexport function stopConfig() {\n  return tuya.stopConfig();\n}\n\nexport function startBluetoothScan(params: StartLeScanParams) {\n  if (Platform.OS === 'ios') {\n    return tuyaBLEScanner.startBluetoothLEScan();\n  }\n  return tuya.startBluetoothScan(params);\n}\n\nexport function activeBLE({deviceInfo, homeId}: ActiveBleParams) {\n  return tuyaBLEScanner.activeBLE({deviceInfo, homeId});\n}\n\nexport async function initBluetoothDualModeActivator(\n  params: InitBluetoothActivatorParams\n): Promise<DeviceBean> {\n  if (Platform.OS === 'ios') {\n    const device = await tuyaBLEActivator.initActivator(params);\n    return prepareDeviceBean(device);\n  }\n  return tuya.initBluetoothDualModeActivator(params);\n}\n\nexport async function initBluetoothDualModeActivatorFromScanBean(\n  params: InitBluetoothActivatorFromScanBeanParams\n): Promise<DeviceBean> {\n  if (Platform.OS === 'ios') {\n    const device = await tuyaBLEActivator.initActivator(params);\n    return prepareDeviceBean(device);\n  }\n  return tuya.initBluetoothDualModeActivatorFromScanBean(params);\n}\n\nexport function stopLeScan() {\n  if (Platform.OS === 'ios') {\n    return tuyaBLEScanner.stopBluetoothScan();\n  }\n  return tuya.stopBluetoothScan();\n}\n\nexport function stopLePairing() {\n  if (Platform.OS === 'ios') {\n    return tuyaBLEActivator.stopLePairing();\n  }\n  return tuya.stopLeActivation();\n}\n\nexport function getCurrentWifi(\n  success: (ssid: string) => void,\n  error: () => void\n) {\n  // We need the Allow While Using App location permission to use this.\n  return tuya.getCurrentWifi({}, success, error);\n}\n","import { NativeModules, EmitterSubscription } from 'react-native';\nimport { addEvent, bridge, DEVLISTENER } from './bridgeUtils';\nimport { DeviceSchemaItem } from './home';\n\nconst tuya = NativeModules.TuyaDeviceModule;\n\nexport type DeviceBean = {\n  productId: string;\n  devId: string;\n  verSw: string;\n  name: string;\n  dps: DeviceDps;\n  deviceType?: number;\n  address?: string;\n  homeId: number;\n  isOnline: boolean;\n  homeDisplayOrder: number;\n  roomId: number;\n  mac: string;\n  ip: string;\n  uuid: string;\n  timezoneId: string;\n  schemaMap: Record<number, DeviceSchemaItem>;\n  productBean: {\n    schemaInfo: {\n      dpCodeSchemaMap: Record<string, DeviceSchemaItem>;\n    };\n  }\n};\n\nexport type DevListenerParams = {\n  devId: string;\n};\n\nexport type DevListenerType =\n  | 'onDpUpdate'\n  | 'onRemoved'\n  | 'onStatusChanged'\n  | 'onNetworkStatusChanged'\n  | 'onDevInfoUpdate'\n  | 'onFirmwareUpgradeSuccess'\n  | 'onFirmwareUpgradeFailure'\n  | 'onFirmwareUpgradeProgress';\n\nlet devListenerSubs: { [devId: string]: EmitterSubscription } = {};\n\nexport function registerDevListener(\n  params: DevListenerParams,\n  type: DevListenerType,\n  callback: (data: any) => void\n) {\n  tuya.registerDevListener(params);\n  const sub = addEvent(bridge(DEVLISTENER, params.devId), data => {\n    if (data.type === type) {\n      callback(data);\n    }\n  });\n  devListenerSubs[params.devId] = sub;\n}\n\nexport function unRegisterAllDevListeners() {\n  for (const devId in devListenerSubs) {\n    const sub = devListenerSubs[devId];\n    sub.remove();\n    tuya.unRegisterDevListener({ devId });\n  }\n  devListenerSubs = {};\n}\n\nexport type DeviceDpValue = boolean | number | string;\nexport type DeviceDps = {\n  [dpId: string]: DeviceDpValue;\n};\nexport type SendParams = {\n  devId: string;\n} & DeviceDps;\n\nexport function send(params: object) {\n  return tuya.send(params);\n}\n\nexport type RemoveDeviceParams = { devId: string };\n\nexport function removeDevice(params: RemoveDeviceParams): Promise<string> {\n  return tuya.removeDevice(params);\n}\n\nexport type RenameDeviceParams = { devId: string; name: string };\n\nexport function renameDevice(params: RenameDeviceParams): Promise<string> {\n  return tuya.renameDevice(params);\n}\n\nexport type GetDataPointStatsParams = {\n  devId: string;\n  DataPointTypeEnum: 'DAY' | 'WEEK' | 'MONTH';\n  number: number; // number of historical data result values, up to 50\n  dpId: string;\n  startTime: number; // in ms\n};\n\nexport function getDataPointStat(\n  params: GetDataPointStatsParams\n): Promise<any> {\n  return tuya.getDataPointStat(params);\n}\n\nexport function getLockMemberList(devId: string): Promise<any> {\n  return tuya.getProLockMemberListWithDevId(devId);\n}\n\nexport function getDp(dpId: object): Promise<any> {\n  return tuya.getDp(dpId);\n}\n\nexport function checkIsBLEConnected(devId: string): Promise<boolean> {\n  return tuya.checkIsBLEConnected(devId);\n}\n\nexport function getProBoundUnlockOpModeListWithDevId(devId: string, userId: string): Promise<boolean> {\n  return tuya.getProBoundUnlockOpModeListWithDevId(devId, userId);\n}\n\nexport function isProNeedAllocUnlockOpMode(devId: string): Promise<boolean> {\n  return tuya.isProNeedAllocUnlockOpMode(devId);\n}\n\nexport function getProOfflinePasswordWithDevId(devId: string): Promise<boolean> {\n  return tuya.getProOfflinePasswordWithDevId(devId);\n}\n\nexport function getLockDynamicPasswordWithSuccess(devId: string): Promise<string> {\n  return tuya.getLockDynamicPasswordWithSuccess(devId);\n}\n\nexport function getProUnboundUnlockOpModeListWithDevId(devId: string): Promise<boolean> {\n  return tuya.getProUnboundUnlockOpModeListWithDevId(devId);\n}\n\nexport function addMemberWithUserName(devId: string, date: Date): Promise<boolean> {\n  return tuya.addMemberWithUserName(devId, date);\n}\n\nexport function getProPasswordListWithDevId(devId: string): Promise<boolean> {\n  return tuya.getProPasswordListWithDevId(devId);\n}\n\nexport function checkDeviceConnectionStatus(devId: string): Promise<boolean> {\n  return tuya.checkIsOnline(devId);\n}\n\nexport function getProCurrentMemberDetailWithDevId(devId: string): Promise<any> {\n  return tuya.getProCurrentMemberDetailWithDevId(devId);\n}\n\nexport function bleManualLockDevice(devId: string): Promise<any> {\n  return tuya.bleManualLockDevice(devId);\n}\n","import { NativeModules } from 'react-native'\nimport { addEvent, bridge, DEVLISTENER } from './bridgeUtils'\n\nconst tuya = NativeModules.TuyaDeviceModule;\n\nexport enum DeviceListenerType {\n  onDpUpdate = 'onDpUpdate',\n  onRemoved = 'onRemoved',\n  onStatusChanged = 'onStatusChanged',\n  onNetworkStatusChanged = 'onNetworkStatusChanged',\n  onDevInfoUpdate = 'onDevInfoUpdate',\n  onFirmwareUpgradeSuccess = 'onFirmwareUpgradeSuccess',\n  onFirmwareUpgradeFailure = 'onFirmwareUpgradeFailure',\n  onFirmwareUpgradeProgress = 'onFirmwareUpgradeProgress',\n}\n\nconst subscriptions: Record<string, number> = {};\n\ntype TDeviceListenerOptions = {\n  devId: string;\n  type: DeviceListenerType;\n}\nexport const addDeviceListener = ({ devId, type}: TDeviceListenerOptions, cb: (data: unknown) => void, onError?: (e: unknown) => void) => {\n  if (!subscriptions[devId]) {\n    tuya.registerDevListener({ devId }).catch((e: unknown) => onError?.(e));\n    subscriptions[devId] = 0;\n  }\n  const sub = addEvent(bridge(DEVLISTENER, devId), data => {\n    if (data.type === type) {\n      cb(data);\n    }\n  });\n  subscriptions[devId]++;\n\n  return {\n    remove: () => {\n      sub.remove();\n      if (subscriptions[devId] <= 1) {\n        tuya.unRegisterDevListener({ devId });\n      }\n      subscriptions[devId]--;\n    }\n  }\n};\n\nexport const removeAllDeviceListeners = () => {\n  Object.keys(subscriptions).forEach((devId) => {\n    tuya.unRegisterDevListener({ devId });\n    delete subscriptions[devId];\n  });\n};\n","import { NativeModules, Platform } from 'react-native';\nimport { DeviceBean } from './device';\nimport { prepareDeviceBean } from './bridgeUtils'\n\nconst tuya = NativeModules.TuyaHomeModule;\n\nexport type QueryRoomListParams = {\n  homeId?: number;\n};\nexport type QueryRoomListResponse = {\n  name: string;\n  displayOrder: number;\n  id: number;\n  roomId: number;\n}[];\n\nexport function queryRoomList(\n  params: QueryRoomListParams\n): Promise<QueryRoomListResponse> {\n  return tuya.queryRoomList(params);\n}\n\nexport type GetHomeDetailParams = {\n  homeId: number;\n};\nexport type DeviceSchemaItem = {\n  id: number;\n  code: string;\n  name: string;\n  extContent: string;\n  type: 'obj' | 'raw';\n  schemaType: 'bool' | 'value' | 'enum' | 'string';\n  property: string;\n  mode: string;\n};\nexport type DeviceDetailResponse = DeviceBean;\nexport type GetHomeDetailResponse = {\n  deviceList: DeviceDetailResponse[];\n  groupList: any[];\n  meshList: any[];\n  sharedDeviceList: any[];\n  sharedGroupList: any[];\n};\n\nexport async function getHomeDetail (\n  params: GetHomeDetailParams\n): Promise<GetHomeDetailResponse> {\n  const homeDetails = await tuya.getHomeDetail(params);\n\n  /*\n  * On iOS home devices list has differences in structure, soo need to make it same as on android\n  * */\n  if (Platform.OS === 'ios' && homeDetails.deviceList) {\n    const deviceList = homeDetails.deviceList?.map((i: DeviceDetailResponse & { schema: string}) => {\n      return prepareDeviceBean(i);\n    });\n\n    return { ...homeDetails, deviceList }\n  }\n  return homeDetails;\n}\n\nexport type UpdateHomeParams = {\n  homeId: number;\n  name: string;\n  geoName: string;\n  lon: number;\n  lat: number;\n};\n\nexport function updateHome(params: UpdateHomeParams): Promise<string> {\n  return tuya.updateHome(params);\n}\n\nexport type DismissHomeParams = {\n  homeId: number;\n};\n\nexport function dismissHome(params: DismissHomeParams): Promise<string> {\n  return tuya.dismissHome(params);\n}\n\nexport type SortRoomsParams = {\n  idList: number[];\n  homeId: number;\n};\n\nexport function sortRoom(params: SortRoomsParams): Promise<string> {\n  return tuya.sortRoom(params);\n}\n","import { NativeModules } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeDataManagerModule;\n\nexport type GetRoomDeviceListParams = {\n  homeId?: number;\n  roomId: number;\n};\n\nexport type GetRoomDeviceListResponse = {\n  deviceList: {}[];\n  groupList: {}[];\n};\n\nexport function getRoomDeviceList(\n  params: GetRoomDeviceListParams\n): Promise<GetRoomDeviceListResponse> {\n  return tuya.getRoomDeviceList(params);\n}\n","import { NativeModules, Platform } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeManagerModule;\n\nexport type CreateHomeParams = {\n  name: string;\n  geoName: string;\n  lon: number;\n  lat: number;\n  rooms: string[];\n};\n\nexport function createHome(params: CreateHomeParams): Promise<{ homeId: number } & Partial<HomeDetailsResponse>> {\n  return tuya.createHome(params);\n}\n\nexport type HomeDetailsResponse = {\n  name: string;\n  admin: boolean;\n  background: string;\n  dealStatus: 1 | 2; // 1 = unaccepted 2 = accepted\n  displayOrder: number;\n  geoName: string;\n  gid: number;\n  homeId: number;\n  lat: number;\n  lon: number;\n};\n\nexport type QueryHomeListResponse = HomeDetailsResponse[];\n\nexport async function queryHomeList(): Promise<QueryHomeListResponse> {\n  let homes = await tuya.queryHomeList();\n  // Tuya's Android SDK uses different property names than the iOS SDK...\n  if (Platform.OS === 'android') {\n    homes = homes.map((m: any) => ({\n      ...m,\n      dealStatus: m.homeStatus,\n    }));\n  }\n  return homes;\n}\n\nexport type JoinFamilyParams = {\n  homeId: number;\n  action: boolean;\n};\n\nexport function joinFamily(params: JoinFamilyParams) {\n  return tuya.joinFamily(params);\n}\n","import { NativeModules, Platform } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeMemberModule;\n\nexport type QueryMemberListParams = { homeId: number };\nexport type MemberListItem = {\n  admin: boolean;\n  username: string;\n  id: number;\n  dealStatus: number;\n};\nexport type QueryMemberListResponse = MemberListItem[];\n\nexport async function queryMemberList(\n  params: QueryMemberListParams\n): Promise<QueryMemberListResponse> {\n  let members = await tuya.queryMemberList(params);\n  // Tuya's Android SDK uses different property names than the iOS SDK...\n  if (Platform.OS === 'android') {\n    members = members.map((m: any) => ({\n      admin: m.admin,\n      username: m.account,\n      id: m.memberId,\n      dealStatus: m.memberStatus,\n    }));\n  }\n  return members;\n}\n\nexport type AddMemberParams = {\n  homeId: number;\n  userAccount: string; // email\n  countryCode: string;\n  name: string;\n  admin: boolean;\n};\n\nexport function addMember(params: AddMemberParams): Promise<any> {\n  return tuya.addMember(params);\n}\n\nexport type RemoveMemberParams = {\n  memberId: number;\n};\n\nexport function removeMember(params: RemoveMemberParams): Promise<any> {\n  return tuya.removeMember(params);\n}\n","import { NativeModules } from 'react-native';\nimport { addEvent, bridge, HARDWAREUPGRADELISTENER } from './bridgeUtils';\n\nconst tuya = NativeModules.TuyaDeviceModule;\n\nexport type StartOtaParams = {\n  devId: string;\n};\n\nexport function startOta(\n  params: StartOtaParams,\n  onSuccess: (data: any) => void,\n  onFailure: (data: any) => void,\n  onProgress: (data: any) => void\n) {\n  tuya.startOta(params);\n  return addEvent(bridge(HARDWAREUPGRADELISTENER, params.devId), data => {\n    if (data.type === 'onSuccess') {\n      onSuccess(data);\n    } else if (data.type === 'onFailure') {\n      onFailure(data);\n    } else if (data.type === 'onProgress') {\n      onProgress(data);\n    }\n  });\n}\n\nexport function getOtaInfo(params: StartOtaParams): Promise<any[]> {\n  return tuya.getOtaInfo(params);\n}\n","import { NativeModules } from 'react-native';\nimport { DeviceDps } from './device';\n\nconst tuya = NativeModules.TuyaTimerModule;\n\nexport type AddTimerWithTaskDpsParams = {\n  devId: number;\n  taskName: string;\n  loops: string; // Number of cycles \"0000000\", each 0: off, 1: on, from left to right: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n  time: string; // e.g. 14:29\n  dps: DeviceDps;\n};\n\nexport function addTimerWithTask(\n  params: AddTimerWithTaskDpsParams\n): Promise<any> {\n  return tuya.addTimerWithTask(params);\n}\n\nexport type UpdateTimerWithTaskParams = AddTimerWithTaskDpsParams & {\n  timerId: string;\n  isOpen: boolean;\n};\n\nexport function updateTimerWithTask(\n  params: UpdateTimerWithTaskParams\n): Promise<any> {\n  return tuya.updateTimerWithTask(params);\n}\n\nexport type GetTimerTaskStatusWithDeviceIdParams = {\n  devId: number;\n};\n\nexport function getTimerTaskStatusWithDeviceId(\n  params: GetTimerTaskStatusWithDeviceIdParams\n): Promise<any> {\n  return tuya.getTimerTaskStatusWithDeviceId(params);\n}\n\nexport type GetAllTimerWithDeviceIdParams = {\n  devId: number;\n};\n\nexport type TimerTask = {\n  timerList: {\n    timerId: string;\n    loops: string;\n    time: string;\n    status: number;\n  }[];\n  timerTaskStatus: { open: boolean; timerName: string };\n};\n\nexport type GetAllTimerWithDeviceIdResponse = TimerTask[];\n\nexport async function getAllTimerWithDeviceId(\n  params: GetAllTimerWithDeviceIdParams\n): Promise<GetAllTimerWithDeviceIdResponse> {\n  const timers = await tuya.getAllTimerWithDeviceId(params);\n  timers.forEach((t: any) => {\n    t.timerTaskStatus.open = !!t.timerTaskStatus.open;\n  });\n  return timers;\n}\n\nexport type RemoveTimerWithTaskParams = {\n  devId: number;\n  taskName: string;\n  timerId: string;\n};\n\nexport function removeTimerWithTask(\n  params: RemoveTimerWithTaskParams\n): Promise<any> {\n  return tuya.removeTimerWithTask(params);\n}\n\nexport type UpdateTimerStatusWithTaskParams = {\n  devId: number;\n  taskName: string;\n  timerId: string;\n  isOpen: boolean;\n};\n\nexport function updateTimerStatusWithTask(\n  params: UpdateTimerStatusWithTaskParams\n): Promise<any> {\n  return tuya.updateTimerStatusWithTask(params);\n}\n","import { NativeModules } from 'react-native';\n\nconst tuya = NativeModules.TuyaUserModule;\n\nexport function registerAccountWithEmail(\n  params: RegisterAccountWithEmailParams\n): Promise<any> {\n  return tuya.registerAccountWithEmail(params);\n}\n\nexport function getRegisterEmailValidateCode(\n  params: GetEmailValidateCodeParams\n): Promise<any> {\n  return tuya.getRegisterEmailValidateCode(params);\n}\n\nexport function sendVerifyCodeWithUserName(params: SendVerifyCodeWithUserNameParams): Promise<any> {\n  return tuya.sendVerifyCodeWithUserName(params);\n}\n\nexport function loginWithEmail(params: LoginWithEmailParams): Promise<any> {\n  return tuya.loginWithEmail(params);\n}\n\nexport function getEmailValidateCode(\n  params: GetEmailValidateCodeParams\n): Promise<any> {\n  return tuya.getEmailValidateCode(params);\n}\n\nexport function resetEmailPassword(\n  params: ResetEmailPasswordParams\n): Promise<any> {\n  return tuya.resetEmailPassword(params);\n}\n\nexport function logout(): Promise<string> {\n  return tuya.logout();\n}\n\nexport function getCurrentUser(): Promise<User | null> {\n  return tuya.getCurrentUser();\n}\n\nexport function getUser(): Promise<User | null> {\n  return tuya.getUser();\n}\n\nexport function cancelAccount(): Promise<string> {\n  return tuya.cancelAccount();\n}\n\nexport async function loginWithUid(params: LoginWithUIDParams): Promise<any> {\n  return tuya.loginWithUid(params);\n}\n\nexport async function loginOrRegisterWithUid(params: LoginOrRegisterWithUidParams): Promise<any> {\n  return tuya.loginOrRegisterWithUid(params);\n}\n\nexport type User = {\n  email: string;\n  username: string;\n  sid: string;\n  timezoneId: string;\n  uid: string;\n  userType: number;\n  headPic: string;\n  mobile: string;\n  nickName: string;\n  phoneCode: string;\n};\n\nexport type RegisterAccountWithEmailParams = {\n  countryCode: string;\n  email: string;\n  validateCode: string;\n  password: string;\n};\n\nexport type GetEmailValidateCodeParams = {\n  countryCode: string;\n  email: string;\n};\n\nexport type SendVerifyCodeWithUserNameParams = {\n  countryCode: string;\n  email: string;\n  region: string;\n  type: 1 | 2 | 3;\n}\n\nexport type LoginWithEmailParams = {\n  email: string;\n  password: string;\n  countryCode: string;\n};\n\nexport type ResetEmailPasswordParams = {\n  email: string;\n  countryCode: string;\n  validateCode: string;\n  newPassword: string;\n};\n\nexport type LoginWithUIDParams = {\n  uid: string;\n  password: string;\n  countryCode: string;\n}\n\nexport type LoginOrRegisterWithUidParams = {\n  uid: string;\n  password: string;\n  countryCode: string;\n}\n"],"names":["eventEmitter","NativeEventEmitter","NativeModules","TuyaRNEventEmitter","addEvent","eventName","callback","addListener","TuyaActivationType","bridge","key","id","prepareDeviceBean","device","schema","JSON","parse","schemaMap","dpCodeSchemaMap","forEach","item","code","_extends","productBean","schemaInfo","tuya","TuyaActivatorModule","tuyaBLEActivator","TuyaBLEActivatorModule","tuyaBLEScanner","TuyaBLEScannerModule","_initActivator","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","wrap","_context","prev","next","Platform","OS","initActivator","abrupt","sent","stop","apply","arguments","_startQRActivator","_callee2","_context2","type","startQRActivator","stopConfig","_initBluetoothDualModeActivator","_callee3","_context3","initBluetoothDualModeActivator","_initBluetoothDualModeActivatorFromScanBean","_callee4","_context4","initBluetoothDualModeActivatorFromScanBean","DeviceListenerType","TuyaDeviceModule","devListenerSubs","subscriptions","TuyaHomeModule","_getHomeDetail","homeDetails","_homeDetails$deviceLi","deviceList","getHomeDetail","map","i","TuyaHomeDataManagerModule","TuyaHomeManagerModule","_queryHomeList","homes","queryHomeList","m","dealStatus","homeStatus","TuyaHomeMemberModule","_queryMemberList","members","queryMemberList","admin","username","account","memberId","memberStatus","TuyaTimerModule","_getAllTimerWithDeviceId","timers","getAllTimerWithDeviceId","t","timerTaskStatus","open","TuyaUserModule","_loginWithUid","loginWithUid","_loginOrRegisterWithUid","loginOrRegisterWithUid","_ref","activeBLE","deviceInfo","homeId","cb","onError","devId","registerDevListener","e","sub","data","remove","unRegisterDevListener","addMember","date","addMemberWithUserName","addTimerWithTask","bleManualLockDevice","cancelAccount","checkIsOnline","checkIsBLEConnected","createHome","dismissHome","getActivatorToken","_x","getCurrentUser","success","error","getCurrentWifi","getDataPointStat","dpId","getDp","getEmailValidateCode","getLockDynamicPasswordWithSuccess","getProLockMemberListWithDevId","getOtaInfo","userId","getProBoundUnlockOpModeListWithDevId","getProCurrentMemberDetailWithDevId","getProOfflinePasswordWithDevId","getProPasswordListWithDevId","getProUnboundUnlockOpModeListWithDevId","getRegisterEmailValidateCode","getRoomDeviceList","getTimerTaskStatusWithDeviceId","getUser","_x3","_x4","isProNeedAllocUnlockOpMode","joinFamily","_x2","loginWithEmail","logout","openNetworkSettings","queryRoomList","registerAccountWithEmail","Object","keys","removeDevice","removeMember","removeTimerWithTask","renameDevice","resetEmailPassword","send","sendVerifyCodeWithUserName","sortRoom","startBluetoothLEScan","startBluetoothScan","onSuccess","onFailure","onProgress","startOta","stopLePairing","stopLeActivation","stopBluetoothScan","stopQRActivator","updateHome","updateTimerStatusWithTask","updateTimerWithTask"],"mappings":"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"}